{"version":3,"sources":["http-common.js","services/movie.service.js","services/comment.service.js","components/movies.sub.list.js","components/movies.sub.detail.js","components/movies.sub.comments.js","components/movies.sub.commentForm.js","components/movies.component.js","App.js","serviceWorker.js","index.js"],"names":["base_url","window","location","protocol","hostname","baseURL","axios","create","headers","params","http","get","id","data","post","put","delete","MovieSubList","setActiveMovie","movie","index","props","this","movies","currentIndex","className","map","onClick","key","title","Component","MovieDetail","selectedMovie","genre","lead_studio","audience_score","Math","round","profitability","rotten_tomatoes","worldwide_gross","year","MovieSubComments","comments","commentObj","name","comment","CommentForm","onChangeCommentName","bind","onChangeCommentText","submitComment","state","message","commentName","commentText","setState","e","target","value","movieID","selectedMovieID","CommentService","then","response","result","cid","movie_id","addNewComment","clearForm","catch","type","placeholder","onChange","required","MovieList","onChangeSearchTitle","retrieveMovies","handlePageChange","handlePageSizeChange","searchTitle","page","count","pageSize","pageSizes","event","getRequestParams","MovieDataService","getAll","totalPages","console","log","commentForm","newComment","currentComments","push","size","Pagination","siblingCount","boundaryCount","variant","shape","ref","instance","App","href","exact","path","component","Movies","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.39c7c8b0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nvar base_url = \"http://localhost\";\r\nif (typeof window !== \"undefined\") {\r\n  base_url = window.location.protocol + \"//\" + window.location.hostname;\r\n}\r\nconst baseURL = base_url + \":8080/api\";\r\nexport default axios.create({\r\n  baseURL: baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  },\r\n});","import http from \"../http-common\";\r\n\r\nclass MovieDataService {\r\n  getAll(params) {\r\n    return http.get(\"/movies\", { params });\r\n  }\r\n  //not use for now\r\n  get(id) {\r\n    return http.get(`/movies/${id}`);\r\n  }\r\n  //not use for now\r\n  create(data) {\r\n    return http.post(\"/movies\", data);\r\n  }\r\n  //not use for now\r\n  update(id, data) {\r\n    return http.put(`/movies/${id}`, data);\r\n  }\r\n  //not use for now\r\n  delete(id) {\r\n    return http.delete(`/movies/${id}`);\r\n  }\r\n  //not use for now\r\n  deleteAll() {\r\n    return http.delete(\"/movies\");\r\n  }\r\n}\r\n\r\nexport default new MovieDataService();\r\n","import http from \"../http-common\";\r\n\r\nclass CommentService {\r\n    //selected Movie id\r\n    getAll(id) {\r\n        return http.get(`/comments/${id}`);\r\n    }\r\n\r\n    create(id, data) {\r\n        return http.post(`/comments/${id}`, data);\r\n    }\r\n\r\n    //not use for now\r\n    delete(id) {\r\n        return http.delete(`/comments/${id}`);\r\n    }\r\n}\r\n\r\nexport default new CommentService();\r\n","import React, { Component } from \"react\";\r\nexport default class MovieSubList extends Component {\r\n    setActiveMovie = (movie, index) => {\r\n        if(this.props.setActiveMovie) {\r\n            this.props.setActiveMovie(movie, index)\r\n        }\r\n    }\r\n    render() {\r\n        const {movies, currentIndex} = this.props;\r\n\r\n        return (\r\n            <ul className=\"list-group\">\r\n                {movies && movies.map((movie, index) => (\r\n                <li\r\n                    className={\"list-group-item \" + (index === currentIndex ? \"active\" : \"\")}\r\n                    onClick={() => this.setActiveMovie(movie, index)}\r\n                    key={index}\r\n                >\r\n                    {movie.title}\r\n                </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nexport default class MovieDetail extends Component {\r\n    render() {\r\n        const {selectedMovie} = this.props;\r\n\r\n        return (\r\n            <div className=\"col-md-12\">\r\n                <h4>{selectedMovie.title}</h4>\r\n                <hr className=\"wd100p\"/>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>Genre: </strong>\r\n                    </label>\r\n                    &nbsp;{selectedMovie.genre}\r\n                </div>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>Studio:</strong>\r\n                    </label>\r\n                    &nbsp;{selectedMovie.lead_studio}\r\n                </div>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>User Rating:</strong>\r\n                    </label>\r\n                    &nbsp;{selectedMovie.audience_score}%\r\n                </div>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>Profitability:</strong>\r\n                    </label>\r\n                    &nbsp;{Math.round(selectedMovie.profitability * 100) / 100}%\r\n                </div>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>Rotten Tomatoes Rating:</strong>\r\n                    </label>\r\n                    &nbsp;{selectedMovie.rotten_tomatoes}%\r\n                </div>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>Worldwide Gross:</strong>\r\n                    </label>\r\n                    &nbsp;{selectedMovie.worldwide_gross}\r\n                </div>\r\n                <div className=\"wd100p\">\r\n                    <label>\r\n                        <strong>Year Release:</strong>\r\n                    </label>\r\n                    &nbsp;{selectedMovie.year}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nexport default class MovieSubComments extends Component {\r\n    render() {\r\n        const {comments} = this.props;\r\n\r\n        return (\r\n            <div className=\"col-md-12\">\r\n                <h5>Comments</h5>\r\n                <div className=\"wd100p ml-2\">\r\n                  {comments && comments.map((commentObj, index) => (\r\n                    <div className=\"wd100p\" key={index}>\r\n                      <label>\r\n                        <strong>{commentObj.name}: </strong>\r\n                      </label>\r\n                      &nbsp;{commentObj.comment}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CommentService from \"../services/comment.service\";\r\n\r\nexport default class CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.onChangeCommentName = this.onChangeCommentName.bind(this);\r\n        this.onChangeCommentText = this.onChangeCommentText.bind(this);\r\n        this.submitComment = this.submitComment.bind(this);\r\n    \r\n        this.state = {\r\n            message: \"\",\r\n            commentName: \"\",\r\n            commentText:\"\"\r\n        };    \r\n    }\r\n    clearForm() {\r\n        this.setState({\r\n            commentName: \"\",\r\n            commentText: \"\",\r\n            message: \"\"\r\n        })\r\n    }\r\n    onChangeCommentName(e) {\r\n        this.setState({\r\n            commentName: e.target.value,\r\n        });\r\n    }\r\n    onChangeCommentText(e) {\r\n        this.setState({\r\n            commentText: e.target.value,\r\n        });\r\n    }\r\n    submitComment(){\r\n        const movieID = this.props.selectedMovieID;\r\n        const params = {\r\n            name: this.state.commentName,\r\n            comment: this.state.commentText\r\n        };\r\n        CommentService.create(movieID, params)\r\n            .then((response) => {\r\n                const { result, message, comment } = response.data;\r\n\r\n                if (result){\r\n                    params.cid = comment.cid;\r\n                    params.movie_id = comment.movie_id;\r\n\r\n                    if(this.props.addNewComment) {\r\n                        this.props.addNewComment(params);\r\n                    }\r\n                    this.clearForm();\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        message: message\r\n                    });\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                this.setState({\r\n                    message: \"some error occurred while adding the comment.\",\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-12\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Your Name\" value={this.state.commentName} onChange={this.onChangeCommentName} required/>\r\n                <textarea className=\"form-control mt-2\" placeholder=\"Your comment\" value={this.state.commentText} onChange={this.onChangeCommentText} required/>\r\n                <span className=\"badge badge-danger\">{this.state.message}</span>\r\n                <button type=\"button\" className=\"btn btn-primary float-right mt-3\" onClick={this.submitComment}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport MovieDataService from \"../services/movie.service\";\r\nimport CommentService from \"../services/comment.service\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport MovieSubList from \"./movies.sub.list.js\";\r\nimport MovieDetail from \"./movies.sub.detail.js\";\r\nimport MovieSubComments from \"./movies.sub.comments.js\";\r\nimport CommentForm from \"./movies.sub.commentForm.js\";\r\n\r\nexport default class MovieList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.retrieveMovies = this.retrieveMovies.bind(this);\r\n    this.setActiveMovie = this.setActiveMovie.bind(this);\r\n    this.handlePageChange = this.handlePageChange.bind(this);\r\n    this.handlePageSizeChange = this.handlePageSizeChange.bind(this);\r\n    this.addNewComment = this.addNewComment.bind(this);\r\n\r\n    this.state = {\r\n      movies: [],\r\n      selectedMovie: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\",\r\n      \r\n      page: 1,\r\n      count: 0,\r\n      pageSize: 10,\r\n\r\n      comments: [],\r\n      message: \"\",\r\n    };\r\n\r\n    this.pageSizes = [10, 25, 50];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveMovies();\r\n  }\r\n\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle: searchTitle,\r\n    },\r\n    () => {\r\n      this.retrieveMovies();\r\n    });\r\n  }\r\n  handlePageChange(event, value) {\r\n    this.setState(\r\n      {\r\n        page: value,\r\n        currentIndex: -1,\r\n      },\r\n      () => {\r\n        this.retrieveMovies();\r\n      }\r\n    );\r\n  }\r\n  handlePageSizeChange(event) {\r\n    this.setState(\r\n      {\r\n        pageSize: event.target.value,\r\n        page: 1\r\n      },\r\n      () => {\r\n        this.retrieveMovies();\r\n      }\r\n    );\r\n  }\r\n  getRequestParams(searchTitle, page, pageSize) {\r\n    let params = {};\r\n\r\n    if (searchTitle) {\r\n      params[\"title\"] = searchTitle;\r\n    } else {\r\n      params[\"title\"] = \"\";\r\n    }\r\n\r\n    if (page) {\r\n      params[\"page\"] = page - 1;\r\n    }\r\n\r\n    if (pageSize) {\r\n      params[\"size\"] = pageSize;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  retrieveMovies() {\r\n    const { searchTitle, page, pageSize } = this.state;\r\n    const params = this.getRequestParams(searchTitle, page, pageSize);\r\n\r\n    MovieDataService.getAll(params)\r\n      .then((response) => {\r\n        const { movies, totalPages } = response.data;\r\n\r\n        this.setState({\r\n          movies: movies,\r\n          count: totalPages,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  setActiveMovie(movie, index) {\r\n    this.setState({\r\n      selectedMovie: movie,\r\n      currentIndex: index,\r\n      comments: null,\r\n\r\n      message: \"\",\r\n    });\r\n\r\n    if(this.commentForm) {\r\n      this.commentForm.clearForm();\r\n    }\r\n\r\n    CommentService.getAll(movie.id)\r\n      .then((response) => {\r\n        this.setState({\r\n          comments: response.data,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  addNewComment(newComment) {\r\n    const currentComments = this.state.comments;\r\n    currentComments.push(newComment);\r\n\r\n    this.setState({\r\n      comments: currentComments,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      searchTitle,\r\n      movies,\r\n      selectedMovie,\r\n      currentIndex,\r\n      page,\r\n      count,\r\n      pageSize,\r\n      comments,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <h3>Movies</h3>\r\n          <hr/>\r\n          <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by title\"\r\n              value={searchTitle}\r\n              onChange={this.onChangeSearchTitle}\r\n            />\r\n          <div className=\"mt-3 mb-2\">\r\n            {\"Movies per Page: \"}\r\n            <select onChange={this.handlePageSizeChange} value={pageSize}>\r\n              {this.pageSizes.map((size) => (\r\n                <option key={size} value={size}>\r\n                  {size}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <MovieSubList \r\n            movies={movies}\r\n            currentIndex={currentIndex}\r\n            setActiveMovie={this.setActiveMovie}\r\n          />\r\n          <Pagination\r\n              className=\"my-3\"\r\n              count={count}\r\n              page={page}\r\n              siblingCount={1}\r\n              boundaryCount={1}\r\n              variant=\"outlined\"\r\n              shape=\"rounded\"\r\n              onChange={this.handlePageChange}\r\n            />\r\n        </div>\r\n        <div className=\"col-md-5 ml-3\">\r\n          {selectedMovie ? (\r\n            <div className=\"row\">\r\n              <MovieDetail \r\n                selectedMovie={selectedMovie}\r\n              />\r\n              <hr className=\"wd100p\"/>\r\n              <MovieSubComments \r\n                comments={comments}\r\n              />\r\n              <hr className=\"wd100p\"/>\r\n              <CommentForm\r\n                ref={(instance)=>{this.commentForm = instance}}\r\n                selectedMovieID={selectedMovie.id}\r\n                addNewComment={this.addNewComment}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"row\">\r\n              <br />\r\n              <p>Please click on a movie to view the detail</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport Movies from \"./components/movies.component\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n            <a href=\"/movies\" className=\"navbar-brand\">\r\n              Challenge Exercise\r\n            </a>\r\n          </nav>\r\n\r\n          <div className=\"container mt-3\">\r\n            <Switch>\r\n              <Route exact path={[\"/\", \"/movies\"]} component={Movies} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}